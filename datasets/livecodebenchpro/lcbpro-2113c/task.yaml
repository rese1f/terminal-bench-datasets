descriptions:
  - key: base
    description: |
      LiveCodeBench Pro (Mini) - external judge.

      The agent must create a C++17 solution file at /app/main.cpp.
      This task does not include local test cases. Instead, the test harness:
        1) POSTs the code to the external judge (/submit) to get a sid,
        2) polls GET /result/{sid}?short=1 until status == "done",
        3) passes only if the judge returns passed == true.

      Environment variables (overridable at runtime):
        - BASE_URL: judge base URL (default http://38.80.122.117:8081)
        - PID: problem id (default 2113C)
        - LANG: language (default cpp)
        - CODE_PATH: path to code (default /app/main.cpp)
        - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)
  - key: problem
    description: |
      The boy Smilo is playing Minecraft! To prepare for the battle with the dragon, he needs a lot of golden apples, and for that, he requires a lot of gold. Therefore, Smilo goes to the mine.

      The mine is a rectangular grid of size $n \times m$, where each cell can be either gold ore, stone, or an empty cell. Smilo can blow up dynamite in any empty cell. When dynamite explodes in an empty cell with coordinates $(x, y)$, all cells within a square of side $2k + 1$ centered at cell $(x, y)$ become empty. If gold ore was located strictly inside this square (not on the boundary), it disappears. However, if the gold ore was on the boundary of this square, Smilo collects that gold.

      Dynamite can only be detonated inside the mine, but the explosion square can extend beyond the mine's boundaries.

      Determine the maximum amount of gold that Smilo can collect.

      ### Input

      Each test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 10^4$). The description of the test cases follows.

      The first line of each test case contains three integers $n$, $m$, and $k$ ($1 \leq n, m, k \leq 500$) -- the number of rows, columns, and the explosion parameter $k$, respectively.

      Each of the following $n$ lines contains $m$ characters, each of which is equal to '.', '#', or 'g', where '.' -- is an empty cell, '#' -- is stone, 'g' -- is gold. It is guaranteed that at least one of the cells is empty.

      It is guaranteed that the sum $n \cdot m$ across all test cases does not exceed $2.5 \cdot 10^5$.

      ### Output

      For each test case, output a single integer -- the maximum amount of gold that can be obtained.

      ### Example

      #### Input #1

      ```

      3

      2 3 1

      #.#

      g.g

      2 3 2

      #.#

      g.g

      3 4 2

      .gg.

      g..#

      g##.

      ```

      #### Output #1

      ```
      2
      0
      4
      ```

      ### Note

      In the first test case, Smilo can detonate the dynamite in any empty cell and obtain $2$ gold:

      ![](https://espresso.codeforces.com/8d84438b7b95b71aaa30d080d90a75329fdadcac.png)

      In the second test case, no matter what Smilo does, he will not be able to obtain any gold:

      ![](https://espresso.codeforces.com/98712070a6a4b0c65db7542b15f57d61ae19e48e.png)

      In the third test case, it is possible to detonate the dynamite in the bottom right corner to obtain $2$ gold, and then make another explosion one cell to the left to obtain the remaining $2$ gold:

      ![](https://espresso.codeforces.com/b781559838668a5220fc0c077b93d684cd0ee5ec.png)

instruction: base
author_email: shz060@ucsd.edu
author: LiveCodeBench Pro Team
difficulty: easy
tags: []
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
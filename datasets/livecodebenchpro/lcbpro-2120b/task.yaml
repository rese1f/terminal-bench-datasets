descriptions:
  - key: base
    description: |
      LiveCodeBench Pro (Mini) - external judge.

      The agent must create a C++17 solution file at /app/main.cpp.
      This task does not include local test cases. Instead, the test harness:
        1) POSTs the code to the external judge (/submit) to get a sid,
        2) polls GET /result/{sid}?short=1 until status == "done",
        3) passes only if the judge returns passed == true.

      Environment variables (overridable at runtime):
        - BASE_URL: judge base URL (default http://38.80.122.117:8081)
        - PID: problem id (default 2120B)
        - LANG: language (default cpp)
        - CODE_PATH: path to code (default /app/main.cpp)
        - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)
  - key: problem
    description: |
      Aryan and Harshith are playing pool in universe AX120 on a fixed square pool table of side $s$ with pockets at its $4$ corners. The corners are situated at $(0,0)$, $(0,s)$, $(s,0)$, and $(s,s)$. In this game variation, $n$ identical balls are placed on the table with integral coordinates such that no ball lies on the edge or corner of the table. Then, they are all simultaneously shot at $10^{100}$ units/sec speed (only at $45$ degrees with the axes).

      In universe AX120, balls and pockets are almost point-sized, and the collisions are elastic, i.e., the ball, on hitting any surface, bounces off at the same angle and with the same speed.

      ![](https://espresso.codeforces.com/03698e95411a27b6d9ed22ef294c00b49125be41.png)

      Harshith shot the balls, and he provided Aryan with the balls' positions and the angles at which he shot them. Help Aryan determine the number of balls potted into the pockets by Harshith.

      It is guaranteed that multiple collisions do not occur at the same moment and position.

      ### Input

      Each test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 1000$). The description of the test cases follows.

      The first line of each test case contains two integers $n$ and $s$ ($1 \le n \le 10^3$, $2 \le s\le 10^9$) -- the number of balls placed on the table and the side length of the square pool table.

      The $i$-th of the next $n$ lines contains four integers $d_x$, $d_y$, $x_i$, and $y_i$ ($d_x,d_y \in \{-1, 1\}$, $0 \lt x_i, y_i \lt s$) -- the direction vectors of the launch on the $X$-axis and $Y$-axis respectively, and the coordinates of the location where the $i$-th ball was placed. It is guaranteed that no two balls coincide at the initial moment.

      It is also guaranteed that the sum of $n$ over all test cases does not exceed $10^3$.

      ### Output

      For each test case, print a single integer -- the number of balls potted in that game.

      ### Example

      #### Input #1

      ```

      2

      1 2

      1 1 1 1

      5 4

      1 -1 1 1

      1 -1 2 2

      -1 1 2 3

      1 -1 1 3

      -1 1 3 1

      ```

      #### Output #1

      ```
      1
      3
      ```

      ### Note

      In the first test case, there is a single ball and it's shot directly towards the pocket at $(2, 2)$, thus potted.

      In the second test case, the state progresses as

      ![](https://espresso.codeforces.com/277925e8c841d4b0517ff0b6c8561252258511eb.png)$\rightarrow$![](https://espresso.codeforces.com/44f2f377936021e233b12e14f5dba0e6d1d000e9.png)![](https://espresso.codeforces.com/9a80571022f338294cd4ac9550a4c0daa39dfd87.png)$\rightarrow$![](https://espresso.codeforces.com/51469a70832c0ea702ea3cae0a23f7a02a03e9f8.png)![](https://espresso.codeforces.com/34ce4b1e26c93608354db73a1fa858ec6f750908.png)$\rightarrow$![](https://espresso.codeforces.com/0174e1fba22cc3437a8783afa0e59b94a2f56cc3.png)![](https://espresso.codeforces.com/5ffdf60ffaaf63625debb70d5e8b9040ef9a496b.png)$\rightarrow$![](https://espresso.codeforces.com/520e6431370faf82a9f177c2dfc707b39e191c9b.png)

instruction: base
author_email: shz060@ucsd.edu
author: LiveCodeBench Pro Team
difficulty: easy
tags: []
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
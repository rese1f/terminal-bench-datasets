descriptions:
  - key: base
    description: |
      LiveCodeBench Pro (Mini) - external judge.

      The agent must create a C++17 solution file at /app/main.cpp.
      This task does not include local test cases. Instead, the test harness:
        1) POSTs the code to the external judge (/submit) to get a sid,
        2) polls GET /result/{sid}?short=1 until status == "done",
        3) passes only if the judge returns passed == true.

      Environment variables (overridable at runtime):
        - BASE_URL: judge base URL (default http://38.80.122.117:8081)
        - PID: problem id (default 2013A)
        - LANG: language (default cpp)
        - CODE_PATH: path to code (default /app/main.cpp)
        - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)
  - key: problem
    description: |
      Today, a club fair was held at "NSPhM". In order to advertise his pastry club, Zhan decided to demonstrate the power of his blender.

      To demonstrate the power of his blender, Zhan has $n$ fruits.

      The blender can mix up to $x$ fruits per second.

      In each second, Zhan can put up to $y$ fruits into the blender. After that, the blender will blend $\min(x, c)$ fruits, where $c$ is the number of fruits inside the blender. After blending, blended fruits are removed from the blender.

      Help Zhan determine the minimum amount of time required for Zhan to blend all fruits.

      ### Input

      Each test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 1000$). The description of the test cases follows.

      The first line of each test case contains one integer $n$ ($0 \le n \le 10^9$) -- the number of fruits Zhan has.

      The second line of each test case contains two integers $x$ and $y$ ($1 \le x, y \le 10^9$) -- the number of fruits the blender can blend per second and the number of fruits Zhan can put into the blender per second.

      ### Output

      For each testcase, output a single integer -- the minimum number of seconds to blend all fruits.

      ### Example

      #### Input #1

      ```

      5

      5

      3 4

      3

      1 2

      6

      4 3

      100

      4 3

      9

      3 3

      ```

      #### Output #1

      ```
      2
      3
      2
      34
      3
      ```

      ### Note

      In the first example, you can first put $2$ fruits in the blender. After that, the blender will mix these $2$ fruits, and in the end, there will be $0$ fruits left in the blender. Then you can put $3$ fruits into the blender, after which the blender will mix these $3$ fruits.

      In the second example, you can put $1$ fruit into the blender $3$ times.

      In the third example, you can first put $3$ fruits into the blender, then add another $3$ fruits.

instruction: base
author_email: shz060@ucsd.edu
author: LiveCodeBench Pro Team
difficulty: easy
tags: []
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
descriptions:
  - key: base
    description: |
      LiveCodeBench Pro (Mini) - external judge.

      The agent must create a C++17 solution file at /app/main.cpp.
      This task does not include local test cases. Instead, the test harness:
        1) POSTs the code to the external judge (/submit) to get a sid,
        2) polls GET /result/{sid}?short=1 until status == "done",
        3) passes only if the judge returns passed == true.

      Environment variables (overridable at runtime):
        - BASE_URL: judge base URL (default http://38.80.122.117:8081)
        - PID: problem id (default 2114C)
        - LANG: language (default cpp)
        - CODE_PATH: path to code (default /app/main.cpp)
        - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)
  - key: problem
    description: |
      Given an array $a$ and $n$ integers. It is sorted in non-decreasing order, that is, $a_i \le a_{i + 1}$ for all $1 \le i < n$.

      You can remove any number of elements from the array (including the option of not removing any at all) without changing the order of the remaining elements. After the removals, the following will occur:

      - $a_1$ is written to a new array;
      - if $a_1 + 1 < a_2$, then $a_2$ is written to a new array; otherwise, $a_2$ is written to the same array as $a_1$;
      - if $a_2 + 1 < a_3$, then $a_3$ is written to a new array; otherwise, $a_3$ is written to the same array as $a_2$;
      - $\cdots$

      For example, if $a=[1, 2, 4, 6]$, then:

      - $a_1 = 1$ is written to the new array, resulting in arrays: $[1]$;
      - $a_1 + 1 = 2$, so $a_2 = 2$ is added to the existing array, resulting in arrays: $[1, 2]$;
      - $a_2 + 1 = 3$, so $a_3 = 4$ is written to a new array, resulting in arrays: $[1, 2]$ and $[4]$;
      - $a_3 + 1 = 5$, so $a_4 = 6$ is written to a new array, resulting in arrays: $[1, 2]$, $[4]$, and $[6]$.

      Your task is to remove elements in such a way that the described algorithm creates as many arrays as possible. If you remove all elements from the array, no new arrays will be created.

      ### Input

      The first line of input contains one integer $t$ ($1 \le t \le 10^4$) -- the number of test cases.

      The first line of each test case contains one integer $n$ ($1 \le n \le 2 \cdot 10^5$) -- the length of the array.

      The second line of each test case contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10^6$, $a_i \le a_{i + 1}$) -- the elements of the array.

      It is guaranteed that the sum of $n$ across all test cases does not exceed $2 \cdot 10^5$.

      ### Output

      For each test case, output one integer -- the maximum number of arrays that can be obtained by removing any (possibly zero) number of elements.

      ### Example

      #### Input #1

      ```

      6

      6

      1 2 3 4 5 6

      3

      1 2 3

      4

      1 2 2 4

      1

      2

      3

      1 4 8

      2

      1 1

      ```

      #### Output #1

      ```
      3
      2
      2
      1
      3
      1
      ```

      ### Note

      In the first example, you can remove $a_3$ and $a_5$, then $a=[1, 2, 4, 6]$, the process of forming arrays for it is shown in the statement.

      In the second example, you need to remove $a_2$, after which $a = [1, 3]$, and the arrays $[1]$ and $[3]$ will be written.

      In the third example, no removals are needed; for $a = [1, 2, 2, 4]$, the arrays $[1, 2, 2]$ and $[4]$ will be written.

instruction: base
author_email: shz060@ucsd.edu
author: LiveCodeBench Pro Team
difficulty: easy
tags: []
max_agent_timeout_sec: 300
max_test_timeout_sec: 180
descriptions:
  - key: base
    description: |
      LiveCodeBench Pro (Mini) - external judge.

      The agent must create a C++17 solution file at /app/main.cpp.
      This task does not include local test cases. Instead, the test harness:
        1) POSTs the code to the external judge (/submit) to get a sid,
        2) polls GET /result/{sid}?short=1 until status == "done",
        3) passes only if the judge returns passed == true.

      Environment variables (overridable at runtime):
        - BASE_URL: judge base URL (default http://38.80.122.117:8081)
        - PID: problem id (default 2061F1)
        - LANG: language (default cpp)
        - CODE_PATH: path to code (default /app/main.cpp)
        - JUDGE_TIMEOUT_SECS: poll timeout seconds (default 120)
  - key: problem
    description: |
      This is the easy version of the problem. The difference between the versions is that in this version, string $t$ consists of only '0' and '1'. You can hack only if you solved all versions of this problem.

      Kevin has a binary string $s$ of length $n$. Kevin can perform the following operation:

      - Choose two adjacent blocks of $s$ and swap them.

      A block is a maximal substring$^{\text{∗}}$ of identical characters. Formally, denote $s[l,r]$ as the substring $s_l s_{l+1} \ldots s_r$. A block is $s[l,r]$ satisfying:

      - $l=1$ or $s_l\not=s_{l-1}$.
      - $s_l=s_{l+1} = \ldots = s_{r}$.
      - $r=n$ or $s_r\not=s_{r+1}$.

      Adjacent blocks are two blocks $s[l_1,r_1]$ and $s[l_2,r_2]$ satisfying $r_1+1=l_2$.

      For example, if $s=\mathtt{000}\,\mathbf{11}\,\mathbf{00}\,\mathtt{111}$, Kevin can choose the two blocks $s[4,5]$ and $s[6,7]$ and swap them, transforming $s$ into $\mathtt{000}\,\mathbf{00}\,\mathbf{11}\,\mathtt{111}$.

      Given a string $t$ of length $n$ consisting of '0', '1' and '?', Kevin wants to determine the minimum number of operations required to perform such that for any index $i$ ($1\le i\le n$), if $t_i\not=$ '?' then $s_i=t_i$. If it is impossible, output $-1$.

      $^{\text{∗}}$A string $a$ is a substring of a string $b$ if $a$ can be obtained from $b$ by the deletion of several (possibly, zero or all) characters from the beginning and several (possibly, zero or all) characters from the end.

      ### Input

      Each test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \le t \le 10^4$). The description of the test cases follows.

      The first line of each test case contains a string $s$ consisting of '0' and '1'.

      The second line of each test case contains a string $t$ consisting of '0' and '1'.

      It is guaranteed that the lengths of $s$ and $t$ are the same.

      It is guaranteed that the sum of the length of $s$ over all test cases will not exceed $4\cdot 10^5$.

      ### Output

      For each test case, output one integer -- the minimum number of operations required. If it is impossible, output $-1$.

      ### Example

      #### Input #1

      ```

      6

      0001100111

      0000011111

      010101

      111000

      0101

      0110

      0101

      1010

      011001

      001110

      0

      1

      ```

      #### Output #1

      ```
      1
      3
      1
      -1
      -1
      -1
      ```

      ### Note

      In the first test case, the possible way is shown in the statement.

      In the second test case, one possible way could be:

      - Swap blocks $[2, 2], [3, 3]$, $s$ will become $\mathtt{001101}$.
      - Swap blocks $[3, 4], [5, 5]$, $s$ will become $\mathtt{000111}$.
      - Swap blocks $[1, 3], [4, 6]$, $s$ will become $\mathtt{111000}$.

instruction: base
author_email: shz060@ucsd.edu
author: LiveCodeBench Pro Team
difficulty: medium
tags: []
max_agent_timeout_sec: 300
max_test_timeout_sec: 180